import os
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy_utils.functions import database_exists, create_database
from sqlalchemy.sql import text

# set up db engine
SQLALCHEMY_DATABASE_URL_FULL = os.environ.get('SQLALCHEMY_DATABASE_URL')
engine = create_engine(
    SQLALCHEMY_DATABASE_URL_FULL
)


def db_init():
    if not database_exists(engine.url):
        SQLALCHEMY_DATABASE_URL_INIT = os.environ.get('DATABASE_URL')
        eng = create_engine(
            SQLALCHEMY_DATABASE_URL_INIT
        )
        conn = sessionmaker(autocommit=False, autoflush=False, bind=eng)()
        try:
            conn.connection().connection.set_isolation_level(0)
            sql_create = text('CREATE DATABASE fastapi')
            conn.execute(sql_create)
            conn.connection().connection.set_isolation_level(1)

        except Exception as ex:
            db_init()
        finally:
            conn.close()


db_init()

e = create_engine(
    SQLALCHEMY_DATABASE_URL_FULL
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=e)
Base = declarative_base()


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
